// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: deduplicator.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeduplicatorClient is the client API for Deduplicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeduplicatorClient interface {
	// Obtains the similarity hash for the incoming text.
	GetSimHash(ctx context.Context, in *GetSimHashRequest, opts ...grpc.CallOption) (*GetSimHashResponse, error)
}

type deduplicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewDeduplicatorClient(cc grpc.ClientConnInterface) DeduplicatorClient {
	return &deduplicatorClient{cc}
}

func (c *deduplicatorClient) GetSimHash(ctx context.Context, in *GetSimHashRequest, opts ...grpc.CallOption) (*GetSimHashResponse, error) {
	out := new(GetSimHashResponse)
	err := c.cc.Invoke(ctx, "/protocol.Deduplicator/GetSimHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeduplicatorServer is the server API for Deduplicator service.
// All implementations must embed UnimplementedDeduplicatorServer
// for forward compatibility
type DeduplicatorServer interface {
	// Obtains the similarity hash for the incoming text.
	GetSimHash(context.Context, *GetSimHashRequest) (*GetSimHashResponse, error)
	mustEmbedUnimplementedDeduplicatorServer()
}

// UnimplementedDeduplicatorServer must be embedded to have forward compatible implementations.
type UnimplementedDeduplicatorServer struct {
}

func (UnimplementedDeduplicatorServer) GetSimHash(context.Context, *GetSimHashRequest) (*GetSimHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimHash not implemented")
}
func (UnimplementedDeduplicatorServer) mustEmbedUnimplementedDeduplicatorServer() {}

// UnsafeDeduplicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeduplicatorServer will
// result in compilation errors.
type UnsafeDeduplicatorServer interface {
	mustEmbedUnimplementedDeduplicatorServer()
}

func RegisterDeduplicatorServer(s grpc.ServiceRegistrar, srv DeduplicatorServer) {
	s.RegisterService(&Deduplicator_ServiceDesc, srv)
}

func _Deduplicator_GetSimHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeduplicatorServer).GetSimHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Deduplicator/GetSimHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeduplicatorServer).GetSimHash(ctx, req.(*GetSimHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deduplicator_ServiceDesc is the grpc.ServiceDesc for Deduplicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deduplicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Deduplicator",
	HandlerType: (*DeduplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSimHash",
			Handler:    _Deduplicator_GetSimHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deduplicator.proto",
}
