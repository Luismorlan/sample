syntax = "proto3";
package protocol;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/rnr-capital/newsfeed-backend/publisher/protocol";

// To regenerate go file:
// protoc --go_out=. --go_opt=paths=source_relative ./protocol/crawler_publisher_message.proto --experimental_allow_proto3_optional

// To regenerate python file:
// protoc -I=./protocol --python_out=./protocol ./protocol/crawler_publisher_message.proto

message CrawledSubSource {
  string id = 1;
  string name = 2;
  string external_id = 3;
  string source_id = 4;
  string avatar_url = 5;
  string origin_url = 6;
}

// A CrawlerMessage represent a post generated by crawler
// Used to communicate between crawler and publisher
message CrawlerMessage {

  message CrawledPost {
    // Original post id that associated with this post in the crawled website.
    // This is for deduplication purpose both in SNS and in Publisher, to make
    // sure we're not inserting the same post twice.
    string deduplicate_id = 1;

    // sub_source is the sub_source information
    // publisher will use this to upsert table "sub_sources"
    // for new user in retweet chain, subsource will not carry sub_source_id
    // for a crawler, when it starts crawl, it should read DB first
    // and when crawler sends message, each message should have
    // sub_source_id
    // [Update]: we decided to remove source_id, since it can be inferred from subsource
    // Also, all sources have default sub source "default"
    CrawledSubSource sub_source = 2;

    // title is the title of the post
    string title = 3;

    // content is the plain text content of the post
    string content = 4;

    // image_urls stores urls to images attached to the post
    repeated string image_urls = 5;

    // files_urls stores urls to files attached to the post
    repeated string files_urls = 6;

    // content_generated_at is the actual time content is generated by 3rd party website
    google.protobuf.Timestamp content_generated_at = 7;

    // origin_url is the url of crawled website
    // example: "http://companies.caixin.com/2021-04-10/101688620.html"
    string origin_url = 8;

    // post which current post is shared from. For weibo share or retweet. For 
    // twitter, this also means quote and retweet.
    CrawledPost shared_from_crawled_post = 9;

    // content tags associated with a post
    repeated string tags = 10;

    // Reply to is a relationship expressed in Twitter, where a thread is 
    // created by multiple posts replying to each other, connected as a thread.
    CrawledPost reply_to = 11;
  }

  // The post details that this message sends
  CrawledPost post = 1;

  // Other auxiliary fields describing the cralwer and message status, regardless of post

  // crawled_at is the time stamp when crawler generate the post
  // note this is different from the actual time content is generated by 3rd party website
  google.protobuf.Timestamp crawled_at = 2;

  // crawler_ip is the crawler's ip to identify which host/lambda generated the post
  string crawler_ip = 3;

  // crawler_version is the crawler's version, this is place holder in future if we want to do AB test
  string crawler_version = 4;

  // is_test is to mark if the post is for end-to-end test purpose
  bool is_test = 5;
}
