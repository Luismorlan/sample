package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"strings"
	"time"

	"github.com/rnr-capital/newsfeed-backend/model"
	"github.com/rnr-capital/newsfeed-backend/server/graph/generated"
)

// DeletedAt is the resolver for the deletedAt field.
func (r *postResolver) DeletedAt(ctx context.Context, obj *model.Post) (*time.Time, error) {
	return &obj.DeletedAt.Time, nil
}

// ImageUrls is the resolver for the imageUrls field.
func (r *postResolver) ImageUrls(ctx context.Context, obj *model.Post) ([]string, error) {
	return obj.ImageUrls, nil
}

// FileUrls is the resolver for the fileUrls field.
func (r *postResolver) FileUrls(ctx context.Context, obj *model.Post) ([]string, error) {
	return obj.FileUrls, nil
}

// Embedding is the resolver for the embedding field.
func (r *postResolver) Embedding(ctx context.Context, obj *model.Post) ([]float64, error) {
	if obj.Embedding == nil {
		return []float64{}, nil
	}
	float64Slice := make([]float64, len(obj.Embedding.Slice()))
	for i, val := range obj.Embedding.Slice() {
		float64Slice[i] = float64(val)
	}
	return float64Slice, nil
}

// Tags is the resolver for the tags field.
func (r *postResolver) Tags(ctx context.Context, obj *model.Post) ([]string, error) {
	return strings.Split(obj.Tag, ","), nil
}

// Post returns generated.PostResolver implementation.
func (r *Resolver) Post() generated.PostResolver { return &postResolver{r} }

type postResolver struct{ *Resolver }
