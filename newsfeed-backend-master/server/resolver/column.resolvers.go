package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/rnr-capital/newsfeed-backend/model"
	"github.com/rnr-capital/newsfeed-backend/server/graph/generated"
)

// SubscriberCount is the resolver for the subscriberCount field.
func (r *columnResolver) SubscriberCount(ctx context.Context, obj *model.Column) (*int, error) {
	var count int64
	r.DB.Model(&model.UserColumnSubscription{}).
		Where("column_id = ?", obj.Id).
		Count(&count)
	res := int(count)
	return &res, nil
}

// MobileNotification is the resolver for the mobileNotification field.
func (r *columnResolver) MobileNotification(ctx context.Context, obj *model.Column) (bool, error) {
	gc, err := GetGinContextFromContext(ctx)
	if err != nil {
		return false, err
	}
	var sub model.UserColumnSubscription
	r.DB.Model(&model.UserColumnSubscription{}).Where("column_id = ? AND user_id = ?", obj.Id, gc.Request.Header.Get("sub")).First(&sub)
	return sub.MobileNotification, nil
}

// WebNotification is the resolver for the webNotification field.
func (r *columnResolver) WebNotification(ctx context.Context, obj *model.Column) (bool, error) {
	gc, err := GetGinContextFromContext(ctx)
	if err != nil {
		return false, err
	}
	var sub model.UserColumnSubscription
	r.DB.Model(&model.UserColumnSubscription{}).Where("column_id = ? AND user_id = ?", obj.Id, gc.Request.Header.Get("sub")).First(&sub)
	return sub.WebNotification, nil
}

// ShowUnreadIndicatorOnIcon is the resolver for the showUnreadIndicatorOnIcon field.
func (r *columnResolver) ShowUnreadIndicatorOnIcon(ctx context.Context, obj *model.Column) (bool, error) {
	gc, err := GetGinContextFromContext(ctx)
	if err != nil {
		return false, err
	}
	var sub model.UserColumnSubscription
	r.DB.Model(&model.UserColumnSubscription{}).Where("column_id = ? AND user_id = ?", obj.Id, gc.Request.Header.Get("sub")).First(&sub)
	return sub.ShowUnreadIndicatorOnIcon, nil
}

// Column returns generated.ColumnResolver implementation.
func (r *Resolver) Column() generated.ColumnResolver { return &columnResolver{r} }

type columnResolver struct{ *Resolver }
